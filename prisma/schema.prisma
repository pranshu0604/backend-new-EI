datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Users -----------------------------------------------------------------------------------------
model User {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  student   Student?
  teacher   Teacher?
  admin     Admin?
  ResetToken ResetToken?

  @@map("users")
}

model Student {
  id                    Int      @id @default(autoincrement())
  firstName             String   @map("first_name")
  lastName              String   @map("last_name")

  // Optional field
  enrollmentNumber      String?  @map("enrollment_number")

  // Relation fields
  userId                Int      @unique @map("user_id")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Many-to-many relation with courses
  enrollments           Enrollment[]
  quizResponses         QuizResponse[]
  responses             AttendanceResponse[]
  assignmentSubmissions AssignmentSubmission[]

  @@map("students")
}

model Teacher {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  
  // Relation fields
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courses   Course[]
  quizzes   Quiz[]
  attendance Attendance[]
  co        CO[]

  @@map("teachers")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  
  // Relation fields
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Enrollment (Join Table) -----------------------------------------------------------------------------------------
model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int      @map("student_id")
  courseId  Int      @map("course_id")
  status    EnrollmentStatus @default(PENDING)
  enrolledAt DateTime @default(now()) @map("enrolled_at")

  // Relations
  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// Courses -----------------------------------------------------------------------------------------
model Course {
  id          Int      @id @default(autoincrement())
  name        String   
  courseCode  String   @map("course_code")
  session     String
  semester    String
  
  // Relation fields
  teacherId   Int      @map("teacher_id")
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  
  // Relations
  enrollments Enrollment[]
  quizzes     Quiz[]
  attendance  Attendance[]
  assignments Assignment[]
  co          CO[]

  @@map("courses")
}

// Quiz System -----------------------------------------------------------------------------------------
model Quiz {
  id            Int            @id @default(autoincrement())
  quizTitle     String?        @map("quiz_title")
  isActive      Boolean?       @map("is_active")
  totalMarks    Float?         @map("total_marks")
  noOfQuestions Int?           @map("no_of_questions")
  quizTime      Int?           @map("quiz_time")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  
  // Relation fields
  courseId      Int            @map("course_id")
  teacherId     Int            @map("teacher_id")
  course        Course         @relation(fields: [courseId], references: [id])
  teacher       Teacher        @relation(fields: [teacherId], references: [id])
  
  // Quiz related relations
  questions     QuizQuestion[]
  responses     QuizResponse[]

  @@map("quizzes")
}

model QuizQuestion {
  id                Int      @id @default(autoincrement())
  questionId        Int      @map("question_id")
  questionTitle     String?  @map("question_title")
  questionType      QuestionType @map("question_type")
  maxMarks          Float?   @map("max_marks")
  referenceImage    String?  @map("reference_image")
  imageCaption      String?  @map("image_caption")
  
  // New fields for numerical questions
  numericalAnswer   Float?   @map("numerical_answer")     // The correct numerical answer
  toleranceLower    Float?   @map("tolerance_lower")      // Lower bound of acceptable range
  toleranceUpper    Float?   @map("tolerance_upper")      // Upper bound of acceptable range

  // Relation fields
  quizId           Int      @map("quiz_id")
  quiz             Quiz     @relation(fields: [quizId], references: [id])

  // Question options (for MCQ types)
  options          QuizOption[]
  answers          QuizAnswer[]

  @@unique([quizId, questionId])
  @@map("quiz_questions")
}

model QuizOption {
  id                Int      @id @default(autoincrement())
  optionText        String?  @map("option_text")
  optionImage       String?  @map("option_image")        // URL or path to the option image
  isCorrect         Boolean  @map("is_correct")          // For single or multi-correct MCQs

  // Relation fields
  questionId        Int      @map("question_id")
  question          QuizQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_options")
}

model QuizResponse {
  id                Int      @id @default(autoincrement())
  studentName       String?  @map("student_name")
  noOfQuestions     Int?     @map("no_of_questions")
  questionsAttempted Int?    @map("questions_attempted")
  totalMarks        Float?   @map("total_marks")
  marksObtained     Float?   @map("marks_obtained")

  // Response to each question
  answers           QuizAnswer[]
  
  // Relation fields
  quizId           Int      @map("quiz_id")
  studentId        Int      @map("student_id")
  quiz             Quiz     @relation(fields: [quizId], references: [id])
  student          Student  @relation(fields: [studentId], references: [id])

  @@map("quiz_responses")
}

model QuizAnswer {
  id                Int      @id @default(autoincrement())
  answerText        String?  @map("answer_text")         // For descriptive answers
  selectedOptions   Int[]    @map("selected_options")    // Array for selected options (for multi-correct MCQs)
  answerImage       String?  @map("answer_image")        // URL or path to the answer image
  numericalAnswer   Float?   @map("numerical_answer")    // For numerical type questions

  // Marks given manually for descriptive questions
  marksAwarded      Float?   @map("marks_awarded")       // To store marks after teacher evaluation
  
  // Relation fields
  responseId        Int      @map("response_id")
  questionId        Int      @map("question_id")
  response          QuizResponse @relation(fields: [responseId], references: [id])
  question          QuizQuestion @relation(fields: [questionId], references: [id])

  @@map("quiz_answers")
}

// ENUM for Question Type
enum QuestionType {
  SINGLE_CORRECT    // Single-correct MCQ
  MULTI_CORRECT     // Multi-correct MCQ
  DESCRIPTIVE       // Descriptive question (manual evaluation)
  SIMULATOR         // Simulator-based question
  NUMERICAL         // Numerical question with tolerance range
}

// Attendance System ---------------------------------------------------------------------------
model Attendance {
  id            Int       @id @default(autoincrement())
  courseId      Int       @map("course_id")
  teacherId     Int       @map("teacher_id")
  date          String
  isActive      Boolean   @default(false) @map("is_active")
  duration      Int
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  course        Course    @relation(fields: [courseId], references: [id])
  teacher       Teacher   @relation(fields: [teacherId], references: [id])
  responses     AttendanceResponse[]

  @@map("attendance")
}

model AttendanceResponse {
  id            Int       @id @default(autoincrement())
  attendanceId  Int       @map("attendance_id")
  studentId     Int       @map("student_id")
  timestamp     DateTime  @default(now())

  // Relations
  attendance    Attendance @relation(fields: [attendanceId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])

  @@map("attendance_responses")
}

// Assignment System -----------------------------------------------------------------------------------------
model Assignment {
  id            Int       @id @default(autoincrement())
  courseId      Int       @map("course_id")
  title         String
  description   String
  dueDate       String?   @map("due_date")
  maxMarks      Float?    @map("max_marks")
  isAssignment  Boolean   @map("is_assignment")
  file          Bytes?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  course        Course    @relation(fields: [courseId], references: [id])
  submissions   AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id            Int       @id @default(autoincrement())
  assignmentId  Int       @map("assignment_id")
  studentId     Int       @map("student_id")
  submissionDate DateTime @default(now()) @map("submission_date")
  file          Bytes?
  marksObtained Float?    @map("marks_obtained")
  feedback      String?
  
  // Relations
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])

  @@map("assignment_submissions")
}

// CO -----------------------------------------------------------------------------------------

model CO {
  id        Int      @id @default(autoincrement())

  MST1_Q1             String
  MST1_Q2             String
  MST1_Q3             String
  MST2_Q1             String
  MST2_Q2             String
  MST2_Q3             String

  // Relation fields
  courseId      Int            @map("course_id")
  teacherId     Int            @map("teacher_id")
  course        Course         @relation(fields: [courseId], references: [id])
  teacher       Teacher        @relation(fields: [teacherId], references: [id])

  @@map("co")
}

// Password Reset Token Table -----------------------------------------------------------------------------------------
model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @default(dbgenerated("now() + interval '10 minutes'")) @map("expires_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

